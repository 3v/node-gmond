// Generated by CoffeeScript 1.4.0
(function() {
  var CLI, Config, Gmetric, Gmond, Logger, WebServer, builder, net,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Gmetric = require('gmetric');

  net = require('net');

  builder = require('xmlbuilder');

  Logger = require('./logger');

  CLI = require('./cli');

  Config = require('./config');

  WebServer = require('./webserver');

  /**
   * The ganglia gmond class.
  */


  Gmond = (function() {

    function Gmond() {
      this.generate_cluster_element = __bind(this.generate_cluster_element, this);
      this.generate_xml_snapshot = __bind(this.generate_xml_snapshot, this);
      this.hashify_metric = __bind(this.hashify_metric, this);
      this.determine_cluster_from_metric = __bind(this.determine_cluster_from_metric, this);
      this.add_metric = __bind(this.add_metric, this);
      this.start_xml_service = __bind(this.start_xml_service, this);      this.config = Config.get();
      this.logger = Logger.get();
      this.gmetric = new Gmetric();
      this.gmond_started = unix_time();
      this.start_xml_service();
      this.clusters = new Object();
    }

    /**
     * Starts up the xml service.
    */


    Gmond.prototype.start_xml_service = function() {
      var server,
        _this = this;
      this.logger.info('Starting xml service');
      server = net.createServer(function(sock) {
        return sock.end(_this.generate_xml_snapshot());
      });
      return server.listen(this.config.get('gmond_tcp_port'), this.config.get('listen_address'));
    };

    /**
     * Returns the current unix timestamp.
    */


    Gmond.prototype.unix_time = function() {
      return new Date().getTime();
    };

    /**
     * Adds a new metric automatically determining the cluster or using defaults.
     * @param {Object} (metric)
    */


    Gmond.prototype.add_metric = function(metric) {
      var cluster, hmet, _base, _name;
      hmet = this.gmetric.parse;
      hmet = hashify_metric(metric);
      cluster = this.determine_cluster_from_metric(hmet);
      return (_base = this.clusters)[_name = hmet.cluster] || (_base[_name] = new Object());
    };

    Gmond.prototype.determine_cluster_from_metric = function(metric) {
      return "analytics";
    };

    /**
     * Generates a hashmap reference of a gmetric object.
    */


    Gmond.prototype.hashify_metric = function(metric) {
      var hmet;
      return hmet = this.gmetric["return"];
    };

    /**
     * Generates an xml snapshot of the gmond state.
    */


    Gmond.prototype.generate_xml_snapshot = function() {
      var cluster, root, _i, _len, _ref;
      root = this.get_gmond_xml_root();
      _ref = Object.keys(this.clusters);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cluster = _ref[_i];
        root = generate_cluster_element(root, cluster);
      }
      return root.end({
        pretty: true,
        indent: '  ',
        newline: "\n"
      });
    };

    /**
     * Appends the cluster_xml for a single cluster to the
    */


    Gmond.prototype.generate_cluster_element = function(root, cluster) {
      var ce, h, hostlist, _i, _len;
      if (Object.keys(this.clusters[cluster].hosts).length === 0) {
        delete_cluster(cluster);
      }
      ce = root.ele('CLUSTER');
      ce.att('NAME', this.clusters[cluster].name || this.config.get('cluster'));
      ce.att('LOCALTIME', new Date().getTime());
      ce.att('OWNER', this.clusters[cluster].owner || this.config.get('owner'));
      ce.att('LATLONG', this.clusters[cluster].latlong || this.config.get('latlong'));
      ce.att('URL', this.clusters[cluster].url || this.config.get('url'));
      if (this.clusters[cluster].hosts === void 0) {
        return root;
      }
      hostlist = Object.keys(this.clusters[cluster].hosts);
      if (hostlist.length === 0) {
        return root;
      }
      for (_i = 0, _len = hostlist.length; _i < _len; _i++) {
        h = hostlist[_i];
        ce = generate_host_element(ce, this.clusters[cluster]['hosts'][h]);
      }
      return root;
    };

    /**
     * Generates a host element for a given host and attaches to the parent.
    */


    Gmond.prototype.generate_host_element = function(parent, host) {
      var he, m, _i, _len, _ref;
      he = parent.ele('HOST');
      he.att('NAME', h);
      he.att('IP', host['ip']);
      he.att('TAGS', (host['tags'] || []).join(','));
      he.att('REPORTED', host['reported']);
      he.att('TN', this.unix_time() - host.tmax);
      he.att('TMAX', host.tmax || this.config.get('tmax'));
      he.att('DMAX', host.dmax || this.config.get('dmax'));
      he.att('LOCATION', host.location || this.config.get('latlong'));
      he.att('GMOND_STARTED', this.gmond_started);
      _ref = host.metrics;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        he = generate_metric_element(he, m);
      }
      return parent;
    };

    /**
     * Generates the metric element and attaches to the parent.
    */


    Gmond.prototype.generate_metric_element = function(parent, metric) {
      var me;
      me = parent.ele('METRIC');
      me.att('NAME', m.name);
      me.att('VAL', m.value);
      me.att('TYPE', m.type);
      me.att('UNITS', m.units);
      me.att('TN', this.unix_time());
      me.att('TMAX', m.tmax || this.config.get('tmax'));
      me.att('DMAX', m.dmax || this.config.get('dmax'));
      me.att('SLOPE', m.slope);
      me = generate_elements(me, metric);
      return parent;
    };

    /**
     * Generates the extra elems for a metric and attaches to the parent.
    */


    Gmond.prototype.generate_extra_elements = function(parent, metric) {
      var ed, ee, extra, extras, _i, _len;
      extras = this.gmetric.extra_elements(metric);
      if (extras.length < 1) {
        return parent;
      }
      ed = parent.ele('EXTRA_DATA');
      for (_i = 0, _len = extras.length; _i < _len; _i++) {
        extra = extras[_i];
        ee = ed.ele('EXTRA_ELEMENT');
        ee.att('NAME', extra);
        ee.att('VAL', metric[extra]);
      }
      return parent;
    };

    /**
     * Returns the gmond_xml root node to build upon.
     * @return {Object} The root gmond xmlbuilder
    */


    Gmond.prototype.get_gmond_xml_root = function() {
      var root;
      root = builder.create('GANGLIA_XML', {
        version: '1.0',
        encoding: 'ISO-8859-1',
        standalone: 'yes'
      }, {
        ext: "[\n<!ELEMENT GANGLIA_XML (GRID|CLUSTER|HOST)*>\n  <!ATTLIST GANGLIA_XML VERSION CDATA #REQUIRED>\n  <!ATTLIST GANGLIA_XML SOURCE CDATA #REQUIRED>\n<!ELEMENT GRID (CLUSTER | GRID | HOSTS | METRICS)*>\n  <!ATTLIST GRID NAME CDATA #REQUIRED>\n  <!ATTLIST GRID AUTHORITY CDATA #REQUIRED>\n  <!ATTLIST GRID LOCALTIME CDATA #IMPLIED>\n<!ELEMENT CLUSTER (HOST | HOSTS | METRICS)*>\n  <!ATTLIST CLUSTER NAME CDATA #REQUIRED>\n  <!ATTLIST CLUSTER OWNER CDATA #IMPLIED>\n  <!ATTLIST CLUSTER LATLONG CDATA #IMPLIED>\n  <!ATTLIST CLUSTER URL CDATA #IMPLIED>\n  <!ATTLIST CLUSTER LOCALTIME CDATA #REQUIRED>\n<!ELEMENT HOST (METRIC)*>\n  <!ATTLIST HOST NAME CDATA #REQUIRED>\n  <!ATTLIST HOST IP CDATA #REQUIRED>\n  <!ATTLIST HOST LOCATION CDATA #IMPLIED>\n  <!ATTLIST HOST TAGS CDATA #IMPLIED>\n  <!ATTLIST HOST REPORTED CDATA #REQUIRED>\n  <!ATTLIST HOST TN CDATA #IMPLIED>\n  <!ATTLIST HOST TMAX CDATA #IMPLIED>\n  <!ATTLIST HOST DMAX CDATA #IMPLIED>\n  <!ATTLIST HOST GMOND_STARTED CDATA #IMPLIED>\n<!ELEMENT METRIC (EXTRA_DATA*)>\n  <!ATTLIST METRIC NAME CDATA #REQUIRED>\n  <!ATTLIST METRIC VAL CDATA #REQUIRED>\n  <!ATTLIST METRIC TYPE (string | int8 | uint8 | int16 | uint16 | int32 | uint32 | int64 | uint64 | float | double | timestamp) #REQUIRED>\n  <!ATTLIST METRIC UNITS CDATA #IMPLIED>\n  <!ATTLIST METRIC TN CDATA #IMPLIED>\n  <!ATTLIST METRIC TMAX CDATA #IMPLIED>\n  <!ATTLIST METRIC DMAX CDATA #IMPLIED>\n  <!ATTLIST METRIC SLOPE (zero | positive | negative | both | unspecified) #IMPLIED>\n  <!ATTLIST METRIC SOURCE (gmond) 'gmond'>\n<!ELEMENT EXTRA_DATA (EXTRA_ELEMENT*)>\n<!ELEMENT EXTRA_ELEMENT EMPTY>\n  <!ATTLIST EXTRA_ELEMENT NAME CDATA #REQUIRED>\n  <!ATTLIST EXTRA_ELEMENT VAL CDATA #REQUIRED>\n<!ELEMENT HOSTS EMPTY>\n  <!ATTLIST HOSTS UP CDATA #REQUIRED>\n  <!ATTLIST HOSTS DOWN CDATA #REQUIRED>\n  <!ATTLIST HOSTS SOURCE (gmond | gmetad) #REQUIRED>\n<!ELEMENT METRICS (EXTRA_DATA*)>\n  <!ATTLIST METRICS NAME CDATA #REQUIRED>\n  <!ATTLIST METRICS SUM CDATA #REQUIRED>\n  <!ATTLIST METRICS NUM CDATA #REQUIRED>\n  <!ATTLIST METRICS TYPE (string | int8 | uint8 | int16 | uint16 | int32 | uint32 | int64 | uint64 | float | double | timestamp) #REQUIRED>\n  <!ATTLIST METRICS UNITS CDATA #IMPLIED>\n  <!ATTLIST METRICS SLOPE (zero | positive | negative | both | unspecified) #IMPLIED>\n  <!ATTLIST METRICS SOURCE (gmond) 'gmond'>\n<GANGLIA_XML VERSION=\"3.3.0\" SOURCE=\"gmond\">\n]"
      });
      return root;
    };

    return Gmond;

  })();

  module.exports = Gmond;

}).call(this);

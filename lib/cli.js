// Generated by CoffeeScript 1.4.0
(function() {
  var CLI, Config, Logger, optimist,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  optimist = require('optimist');

  require('pkginfo')(module, 'name');

  Config = require('./config');

  Logger = require('./logger');

  /**
   * The command line interface class.
  */


  CLI = (function() {

    function CLI() {
      this.set_defaults = __bind(this.set_defaults, this);
      this.set_file = __bind(this.set_file, this);
      this.set_env = __bind(this.set_env, this);
      this.set_argv = __bind(this.set_argv, this);
      this.set_overrides = __bind(this.set_overrides, this);
      this.configure = __bind(this.configure, this);      this.config = Config.get();
      this.logger = Logger.get();
      this.argv = optimist.usage("Usage: " + exports.name).alias('c', 'config').describe('c', 'The configuration file to use')["default"]('c', "/etc/node-gmond.json").alias('g', 'listen_address').describe('g', 'The gmond address to listen on')["default"]('g', '127.0.0.1').alias('t', 'gmond_tcp_port').describe('t', 'The gmond TCP port to listen on')["default"]('t', 8649).alias('u', 'gmond_udp_port').describe('u', 'The gmond UDP port to listen on (for XML requests)')["default"]('u', 8649).alias('D', 'dmax').describe('D', 'The dmax of a ganglia host (host TTL for cleanup)')["default"]('D', 3600).alias('T', 'cleanup_threshold').describe('T', 'The interval in seconds for checking dmax expiration')["default"]('T', 300).alias('C', 'cluster').describe('C', 'The default ganglia cluster name')["default"]('C', 'main').alias('O', 'owner').describe('O', 'The default ganglia cluster owner')["default"]('O', 'unspecified').alias('L', 'latlong').describe('L', 'The default ganglia cluster latlong')["default"]('L', 'unspecified').alias('U', 'url').describe('U', 'The default ganglia cluster url')["default"]('U', '127.0.0.1').alias('M', 'metadata_interval').describe('M', 'The default ganglia send metadata interval')["default"]('M', 20).alias('l', 'loglevel').describe('l', 'Set the log level (debug, info, warn, error, fatal)')["default"]('l', 'warn').alias('p', 'port').describe('p', 'Run the api server on the given port')["default"]('p', 3000).alias('h', 'help').describe('h', 'Shows this message')["default"]('h', false).argv;
      this.configure();
      if (this.config.get('help') && this.config.get('help').toString() === "true") {
        optimist.showHelp();
        process.exit(0);
      }
    }

    CLI.prototype.configure = function() {
      this.set_overrides();
      this.set_argv();
      this.set_env();
      this.set_file();
      return this.set_defaults();
    };

    CLI.prototype.set_overrides = function() {
      return this.config.overrides({});
    };

    CLI.prototype.set_argv = function() {
      return this.config.add('optimist_args', {
        type: 'literal',
        store: this.argv
      });
    };

    CLI.prototype.set_env = function() {
      return this.config.env({
        whitelist: []
      });
    };

    CLI.prototype.set_file = function() {
      return this.config.file({
        file: this.config.get('c')
      });
    };

    CLI.prototype.set_defaults = function() {
      return this.config.defaults({});
    };

    return CLI;

  })();

  module.exports = CLI;

}).call(this);
